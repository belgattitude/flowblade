/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  QueryClient,
  QueryKey,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query';

import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@/config/api-fetcher-kubb.config.ts';
import type fetch from '@/config/api-fetcher-kubb.config.ts';

import { getApiDemoDuckdbSearch } from '../../getApiDemoDuckdbSearch';
import type {
  GetApiDemoDuckdbSearchQueryParams,
  GetApiDemoDuckdbSearchQueryResponse,
} from '../../models/GetApiDemoDuckdbSearch';

export const getApiDemoDuckdbSearchSuspenseQueryKey = (
  params?: GetApiDemoDuckdbSearchQueryParams
) =>
  [
    'v5',
    { url: '/api/demo/duckdb/search' },
    ...(params ? [params] : []),
  ] as const;

export type GetApiDemoDuckdbSearchSuspenseQueryKey = ReturnType<
  typeof getApiDemoDuckdbSearchSuspenseQueryKey
>;

export function getApiDemoDuckdbSearchSuspenseQueryOptionsHook(
  params?: GetApiDemoDuckdbSearchQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {}
) {
  const queryKey = getApiDemoDuckdbSearchSuspenseQueryKey(params);
  return queryOptions<
    GetApiDemoDuckdbSearchQueryResponse,
    ResponseErrorConfig<Error>,
    GetApiDemoDuckdbSearchQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getApiDemoDuckdbSearch(params, config);
    },
  });
}

/**
 * @description Search
 * {@link /api/demo/duckdb/search}
 */
export function useGetApiDemoDuckdbSearchSuspenseHook<
  TData = GetApiDemoDuckdbSearchQueryResponse,
  TQueryKey extends QueryKey = GetApiDemoDuckdbSearchSuspenseQueryKey,
>(
  params?: GetApiDemoDuckdbSearchQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetApiDemoDuckdbSearchQueryResponse,
        ResponseErrorConfig<Error>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {}
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...queryOptions } = queryConfig;
  const queryKey =
    queryOptions?.queryKey ?? getApiDemoDuckdbSearchSuspenseQueryKey(params);

  const query = useSuspenseQuery(
    {
      ...getApiDemoDuckdbSearchSuspenseQueryOptionsHook(params, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
