/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  QueryClient,
  QueryKey,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { queryOptions, useQuery } from '@tanstack/react-query';

import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@/config/api-fetcher-kubb.config.ts';
import type client from '@/config/api-fetcher-kubb.config.ts';

import { getApiDemoDuckdbSearch } from '../../getApiDemoDuckdbSearch';
import type {
  GetApiDemoDuckdbSearchQueryParams,
  GetApiDemoDuckdbSearchQueryResponse,
} from '../../models/GetApiDemoDuckdbSearch';

export const getApiDemoDuckdbSearchQueryKey = (
  params?: GetApiDemoDuckdbSearchQueryParams
) =>
  [
    'v5',
    { url: '/api/demo/duckdb/search' },
    ...(params ? [params] : []),
  ] as const;

export type GetApiDemoDuckdbSearchQueryKey = ReturnType<
  typeof getApiDemoDuckdbSearchQueryKey
>;

export function getApiDemoDuckdbSearchQueryOptionsHook(
  params?: GetApiDemoDuckdbSearchQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = getApiDemoDuckdbSearchQueryKey(params);
  return queryOptions<
    GetApiDemoDuckdbSearchQueryResponse,
    ResponseErrorConfig<Error>,
    GetApiDemoDuckdbSearchQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getApiDemoDuckdbSearch(params, config);
    },
  });
}

/**
 * @description Search
 * {@link /api/demo/duckdb/search}
 */
export function useGetApiDemoDuckdbSearchHook<
  TData = GetApiDemoDuckdbSearchQueryResponse,
  TQueryData = GetApiDemoDuckdbSearchQueryResponse,
  TQueryKey extends QueryKey = GetApiDemoDuckdbSearchQueryKey,
>(
  params?: GetApiDemoDuckdbSearchQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetApiDemoDuckdbSearchQueryResponse,
        ResponseErrorConfig<Error>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? getApiDemoDuckdbSearchQueryKey(params);

  const query = useQuery(
    {
      ...(getApiDemoDuckdbSearchQueryOptionsHook(
        params,
        config
      ) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
