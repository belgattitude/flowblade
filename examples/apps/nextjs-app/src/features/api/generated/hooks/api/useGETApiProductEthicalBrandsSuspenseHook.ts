/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  QueryClient,
  QueryKey,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query';

import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@/config/api-fetcher-kubb.config.ts';
import type fetch from '@/config/api-fetcher-kubb.config.ts';

import { GETApiProductEthicalBrands } from '../../GETApiProductEthicalBrands';
import type { GETApiProductEthicalBrandsQueryResponse } from '../../models/GETApiProductEthicalBrands';

export const GETApiProductEthicalBrandsSuspenseQueryKey = () =>
  ['v5', { url: '/api/product/ethical/brands' }] as const;

export type GETApiProductEthicalBrandsSuspenseQueryKey = ReturnType<
  typeof GETApiProductEthicalBrandsSuspenseQueryKey
>;

export function GETApiProductEthicalBrandsSuspenseQueryOptionsHook(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {}
) {
  const queryKey = GETApiProductEthicalBrandsSuspenseQueryKey();
  return queryOptions<
    GETApiProductEthicalBrandsQueryResponse,
    ResponseErrorConfig<Error>,
    GETApiProductEthicalBrandsQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return GETApiProductEthicalBrands(config);
    },
  });
}

/**
 * @description Get list of ethical brands
 * {@link /api/product/ethical/brands}
 */
export function useGETApiProductEthicalBrandsSuspenseHook<
  TData = GETApiProductEthicalBrandsQueryResponse,
  TQueryKey extends QueryKey = GETApiProductEthicalBrandsSuspenseQueryKey,
>(
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GETApiProductEthicalBrandsQueryResponse,
        ResponseErrorConfig<Error>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {}
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...queryOptions } = queryConfig;
  const queryKey =
    queryOptions?.queryKey ?? GETApiProductEthicalBrandsSuspenseQueryKey();

  const query = useSuspenseQuery(
    {
      ...GETApiProductEthicalBrandsSuspenseQueryOptionsHook(config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
