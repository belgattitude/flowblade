/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  QueryClient,
  QueryKey,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { queryOptions, useQuery } from '@tanstack/react-query';

import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@/config/api-fetcher-kubb.config.ts';
import type fetch from '@/config/api-fetcher-kubb.config.ts';

import { GETApiDemoDuckdbSearch } from '../../GETApiDemoDuckdbSearch';
import type { GETApiDemoDuckdbSearchQueryResponse } from '../../models/GETApiDemoDuckdbSearch';

export const GETApiDemoDuckdbSearchQueryKey = () =>
  ['v5', { url: '/api/demo/duckdb/search' }] as const;

export type GETApiDemoDuckdbSearchQueryKey = ReturnType<
  typeof GETApiDemoDuckdbSearchQueryKey
>;

export function GETApiDemoDuckdbSearchQueryOptionsHook(
  config: Partial<RequestConfig> & { client?: typeof fetch } = {}
) {
  const queryKey = GETApiDemoDuckdbSearchQueryKey();
  return queryOptions<
    GETApiDemoDuckdbSearchQueryResponse,
    ResponseErrorConfig<Error>,
    GETApiDemoDuckdbSearchQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return GETApiDemoDuckdbSearch(config);
    },
  });
}

/**
 * @description Search
 * {@link /api/demo/duckdb/search}
 */
export function useGETApiDemoDuckdbSearchHook<
  TData = GETApiDemoDuckdbSearchQueryResponse,
  TQueryData = GETApiDemoDuckdbSearchQueryResponse,
  TQueryKey extends QueryKey = GETApiDemoDuckdbSearchQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        GETApiDemoDuckdbSearchQueryResponse,
        ResponseErrorConfig<Error>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {}
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...queryOptions } = queryConfig;
  const queryKey = queryOptions?.queryKey ?? GETApiDemoDuckdbSearchQueryKey();

  const query = useQuery(
    {
      ...GETApiDemoDuckdbSearchQueryOptionsHook(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
